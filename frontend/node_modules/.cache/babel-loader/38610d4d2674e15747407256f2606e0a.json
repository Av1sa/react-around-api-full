{"ast":null,"code":"import { baseUrl, headers, INVALID_INPUT_1, INVALID_INPUT_2, USER_NOT_FOUND, TOKEN_INVALID_1, TOKEN_INVALID_2 } from \"./utils\";\n\nclass Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this.baseUrl = baseUrl;\n    this.headers = headers;\n  }\n\n  _getResponseData(res, message) {\n    return res.ok ? res.json() : Promise.reject(message ? `Error: ${message}` : `Error: ${res.status}`);\n  } //GET Get initial cards\n\n\n  getInitialCards() {\n    return fetch(`${this.baseUrl}/cards`, {\n      headers: this.headers\n    }).then(res => this._getResponseData(res));\n  } //GET Get user info\n\n\n  getUserInfo() {\n    return fetch(`${this.baseUrl}/users/me`, {\n      headers: this.headers\n    }).then(res => this._getResponseData(res));\n  } //PATCH Set user info\n\n\n  setUserInfo({\n    name,\n    about\n  }) {\n    return fetch(`${this.baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(res => this._getResponseData(res));\n  } //PATCH Set user avatar\n\n\n  setUserAvatar({\n    avatar\n  }) {\n    return fetch(`${this.baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(res => this._getResponseData(res));\n  } //POST Add new place\n\n\n  addCard({\n    name,\n    link\n  }) {\n    return fetch(`${this.baseUrl}/cards`, {\n      headers: this.headers,\n      method: \"POST\",\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(res => this._getResponseData(res));\n  } //DELETE Remove place\n\n\n  removeCard(cardId) {\n    return fetch(`${this.baseUrl}/cards/${cardId}`, {\n      headers: this.headers,\n      method: \"DELETE\"\n    }).then(res => this._getResponseData(res));\n  } //PUT/DELETE Change Like status\n\n\n  changeLikeCardStatus(cardId, method) {\n    return fetch(`${this.baseUrl}/cards/likes/${cardId}`, {\n      headers: this.headers,\n      method: method\n    }).then(res => this._getResponseData(res));\n  } //Get initial data\n\n\n  getAppInfo() {\n    return Promise.all([this.getInitialCards(), this.getUserInfo()]);\n  } //POST sign up\n\n\n  signUp({\n    password,\n    email\n  }) {\n    return fetch(`${this.baseUrl}/signup`, {\n      headers: this.headers,\n      method: \"POST\",\n      body: JSON.stringify({\n        password,\n        email\n      })\n    }).then(res => this._getResponseData(res));\n  } //POST sign in\n\n\n  signIn({\n    password,\n    email\n  }) {\n    return fetch(`${this.baseUrl}/signin`, {\n      headers: this.headers,\n      method: \"POST\",\n      body: JSON.stringify({\n        password,\n        email\n      })\n    }).then(res => this._getResponseData(res));\n  } //GET check token\n\n\n  checkToken(token) {\n    return fetch(`${this.baseUrl}/users.me`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => this._getResponseData(res));\n  }\n\n} //Init api\n\n\nconst api = new Api({\n  baseUrl,\n  headers\n});\nexport default api;","map":{"version":3,"sources":["/Users/Marina/Yandex Practicum/around-react/src/utils/api.js"],"names":["baseUrl","headers","INVALID_INPUT_1","INVALID_INPUT_2","USER_NOT_FOUND","TOKEN_INVALID_1","TOKEN_INVALID_2","Api","constructor","_getResponseData","res","message","ok","json","Promise","reject","status","getInitialCards","fetch","then","getUserInfo","setUserInfo","name","about","method","body","JSON","stringify","setUserAvatar","avatar","addCard","link","removeCard","cardId","changeLikeCardStatus","getAppInfo","all","signUp","password","email","signIn","checkToken","token","Authorization","api"],"mappings":"AAAA,SACEA,OADF,EAEEC,OAFF,EAGEC,eAHF,EAIEC,eAJF,EAKEC,cALF,EAMEC,eANF,EAOEC,eAPF,QAQO,SARP;;AAUA,MAAMC,GAAN,CAAU;AACRC,EAAAA,WAAW,CAAC;AAAER,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,EAAuB;AAChC,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeA,OAAf;AACD;;AAEDQ,EAAAA,gBAAgB,CAACC,GAAD,EAAMC,OAAN,EAAe;AAC7B,WAAOD,GAAG,CAACE,EAAJ,GACHF,GAAG,CAACG,IAAJ,EADG,GAEHC,OAAO,CAACC,MAAR,CAAeJ,OAAO,GAAI,UAASA,OAAQ,EAArB,GAA0B,UAASD,GAAG,CAACM,MAAO,EAApE,CAFJ;AAGD,GAVO,CAYR;;;AACAC,EAAAA,eAAe,GAAG;AAChB,WAAOC,KAAK,CAAE,GAAE,KAAKlB,OAAQ,QAAjB,EAA0B;AACpCC,MAAAA,OAAO,EAAE,KAAKA;AADsB,KAA1B,CAAL,CAEJkB,IAFI,CAEET,GAAD,IAAS,KAAKD,gBAAL,CAAsBC,GAAtB,CAFV,CAAP;AAGD,GAjBO,CAmBR;;;AACAU,EAAAA,WAAW,GAAG;AACZ,WAAOF,KAAK,CAAE,GAAE,KAAKlB,OAAQ,WAAjB,EAA6B;AACvCC,MAAAA,OAAO,EAAE,KAAKA;AADyB,KAA7B,CAAL,CAEJkB,IAFI,CAEET,GAAD,IAAS,KAAKD,gBAAL,CAAsBC,GAAtB,CAFV,CAAP;AAGD,GAxBO,CA0BR;;;AACAW,EAAAA,WAAW,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,EAAkB;AAC3B,WAAOL,KAAK,CAAE,GAAE,KAAKlB,OAAQ,WAAjB,EAA6B;AACvCwB,MAAAA,MAAM,EAAE,OAD+B;AAEvCvB,MAAAA,OAAO,EAAE,KAAKA,OAFyB;AAGvCwB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAf;AAHiC,KAA7B,CAAL,CAIJJ,IAJI,CAIET,GAAD,IAAS,KAAKD,gBAAL,CAAsBC,GAAtB,CAJV,CAAP;AAKD,GAjCO,CAmCR;;;AACAkB,EAAAA,aAAa,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAa;AACxB,WAAOX,KAAK,CAAE,GAAE,KAAKlB,OAAQ,kBAAjB,EAAoC;AAC9CwB,MAAAA,MAAM,EAAE,OADsC;AAE9CvB,MAAAA,OAAO,EAAE,KAAKA,OAFgC;AAG9CwB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEE,QAAAA;AAAF,OAAf;AAHwC,KAApC,CAAL,CAIJV,IAJI,CAIET,GAAD,IAAS,KAAKD,gBAAL,CAAsBC,GAAtB,CAJV,CAAP;AAKD,GA1CO,CA4CR;;;AACAoB,EAAAA,OAAO,CAAC;AAAER,IAAAA,IAAF;AAAQS,IAAAA;AAAR,GAAD,EAAiB;AACtB,WAAOb,KAAK,CAAE,GAAE,KAAKlB,OAAQ,QAAjB,EAA0B;AACpCC,MAAAA,OAAO,EAAE,KAAKA,OADsB;AAEpCuB,MAAAA,MAAM,EAAE,MAF4B;AAGpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,QAAAA,IAAF;AAAQS,QAAAA;AAAR,OAAf;AAH8B,KAA1B,CAAL,CAIJZ,IAJI,CAIET,GAAD,IAAS,KAAKD,gBAAL,CAAsBC,GAAtB,CAJV,CAAP;AAKD,GAnDO,CAqDR;;;AACAsB,EAAAA,UAAU,CAACC,MAAD,EAAS;AACjB,WAAOf,KAAK,CAAE,GAAE,KAAKlB,OAAQ,UAASiC,MAAO,EAAjC,EAAoC;AAC9ChC,MAAAA,OAAO,EAAE,KAAKA,OADgC;AAE9CuB,MAAAA,MAAM,EAAE;AAFsC,KAApC,CAAL,CAGJL,IAHI,CAGET,GAAD,IAAS,KAAKD,gBAAL,CAAsBC,GAAtB,CAHV,CAAP;AAID,GA3DO,CA6DR;;;AACAwB,EAAAA,oBAAoB,CAACD,MAAD,EAAST,MAAT,EAAiB;AACnC,WAAON,KAAK,CAAE,GAAE,KAAKlB,OAAQ,gBAAeiC,MAAO,EAAvC,EAA0C;AACpDhC,MAAAA,OAAO,EAAE,KAAKA,OADsC;AAEpDuB,MAAAA,MAAM,EAAEA;AAF4C,KAA1C,CAAL,CAGJL,IAHI,CAGET,GAAD,IAAS,KAAKD,gBAAL,CAAsBC,GAAtB,CAHV,CAAP;AAID,GAnEO,CAqER;;;AACAyB,EAAAA,UAAU,GAAG;AACX,WAAOrB,OAAO,CAACsB,GAAR,CAAY,CAAC,KAAKnB,eAAL,EAAD,EAAyB,KAAKG,WAAL,EAAzB,CAAZ,CAAP;AACD,GAxEO,CA0ER;;;AACAiB,EAAAA,MAAM,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,EAAsB;AAC1B,WAAOrB,KAAK,CAAE,GAAE,KAAKlB,OAAQ,SAAjB,EAA2B;AACrCC,MAAAA,OAAO,EAAE,KAAKA,OADuB;AAErCuB,MAAAA,MAAM,EAAE,MAF6B;AAGrCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEW,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAf;AAH+B,KAA3B,CAAL,CAIJpB,IAJI,CAIET,GAAD,IAAS,KAAKD,gBAAL,CAAsBC,GAAtB,CAJV,CAAP;AAKD,GAjFO,CAmFR;;;AACA8B,EAAAA,MAAM,CAAC;AAAEF,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,EAAsB;AAC1B,WAAOrB,KAAK,CAAE,GAAE,KAAKlB,OAAQ,SAAjB,EAA2B;AACrCC,MAAAA,OAAO,EAAE,KAAKA,OADuB;AAErCuB,MAAAA,MAAM,EAAE,MAF6B;AAGrCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEW,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAf;AAH+B,KAA3B,CAAL,CAIJpB,IAJI,CAIET,GAAD,IAAS,KAAKD,gBAAL,CAAsBC,GAAtB,CAJV,CAAP;AAKD,GA1FO,CA4FR;;;AACA+B,EAAAA,UAAU,CAACC,KAAD,EAAQ;AAChB,WAAOxB,KAAK,CAAE,GAAE,KAAKlB,OAAQ,WAAjB,EAA6B;AACvCC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP0C,QAAAA,aAAa,EAAG,UAASD,KAAM;AAFxB;AAD8B,KAA7B,CAAL,CAKJvB,IALI,CAKET,GAAD,IAAS,KAAKD,gBAAL,CAAsBC,GAAtB,CALV,CAAP;AAMD;;AApGO,C,CAuGV;;;AACA,MAAMkC,GAAG,GAAG,IAAIrC,GAAJ,CAAQ;AAClBP,EAAAA,OADkB;AAElBC,EAAAA;AAFkB,CAAR,CAAZ;AAKA,eAAe2C,GAAf","sourcesContent":["import {\n  baseUrl,\n  headers,\n  INVALID_INPUT_1,\n  INVALID_INPUT_2,\n  USER_NOT_FOUND,\n  TOKEN_INVALID_1,\n  TOKEN_INVALID_2,\n} from \"./utils\";\n\nclass Api {\n  constructor({ baseUrl, headers }) {\n    this.baseUrl = baseUrl;\n    this.headers = headers;\n  }\n\n  _getResponseData(res, message) {\n    return res.ok\n      ? res.json()\n      : Promise.reject(message ? `Error: ${message}` : `Error: ${res.status}`);\n  }\n\n  //GET Get initial cards\n  getInitialCards() {\n    return fetch(`${this.baseUrl}/cards`, {\n      headers: this.headers,\n    }).then((res) => this._getResponseData(res));\n  }\n\n  //GET Get user info\n  getUserInfo() {\n    return fetch(`${this.baseUrl}/users/me`, {\n      headers: this.headers,\n    }).then((res) => this._getResponseData(res));\n  }\n\n  //PATCH Set user info\n  setUserInfo({ name, about }) {\n    return fetch(`${this.baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({ name, about }),\n    }).then((res) => this._getResponseData(res));\n  }\n\n  //PATCH Set user avatar\n  setUserAvatar({ avatar }) {\n    return fetch(`${this.baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({ avatar }),\n    }).then((res) => this._getResponseData(res));\n  }\n\n  //POST Add new place\n  addCard({ name, link }) {\n    return fetch(`${this.baseUrl}/cards`, {\n      headers: this.headers,\n      method: \"POST\",\n      body: JSON.stringify({ name, link }),\n    }).then((res) => this._getResponseData(res));\n  }\n\n  //DELETE Remove place\n  removeCard(cardId) {\n    return fetch(`${this.baseUrl}/cards/${cardId}`, {\n      headers: this.headers,\n      method: \"DELETE\",\n    }).then((res) => this._getResponseData(res));\n  }\n\n  //PUT/DELETE Change Like status\n  changeLikeCardStatus(cardId, method) {\n    return fetch(`${this.baseUrl}/cards/likes/${cardId}`, {\n      headers: this.headers,\n      method: method,\n    }).then((res) => this._getResponseData(res));\n  }\n\n  //Get initial data\n  getAppInfo() {\n    return Promise.all([this.getInitialCards(), this.getUserInfo()]);\n  }\n\n  //POST sign up\n  signUp({ password, email }) {\n    return fetch(`${this.baseUrl}/signup`, {\n      headers: this.headers,\n      method: \"POST\",\n      body: JSON.stringify({ password, email }),\n    }).then((res) => this._getResponseData(res));\n  }\n\n  //POST sign in\n  signIn({ password, email }) {\n    return fetch(`${this.baseUrl}/signin`, {\n      headers: this.headers,\n      method: \"POST\",\n      body: JSON.stringify({ password, email }),\n    }).then((res) => this._getResponseData(res));\n  }\n\n  //GET check token\n  checkToken(token) {\n    return fetch(`${this.baseUrl}/users.me`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    }).then((res) => this._getResponseData(res));\n  }\n}\n\n//Init api\nconst api = new Api({\n  baseUrl,\n  headers,\n});\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}